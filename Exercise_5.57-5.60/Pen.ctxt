#BlueJ class context
comment0.params=
comment0.target=Pen()
comment0.text=\r\n\ Create\ a\ new\ Pen\ with\ its\ own\ canvas.\ The\ pen\ will\ create\ a\ new\ canvas\ for\ \r\n\ itself\ to\ draw\ on,\ and\ start\ in\ the\ default\ state\ (centre\ of\ canvas,\ direction\r\n\ right,\ color\ black,\ pen\ down).\r\n
comment1.params=xPos\ yPos\ drawingCanvas
comment1.target=Pen(int,\ int,\ Canvas)
comment1.text=\r\n\ Create\ a\ new\ Pen\ for\ a\ given\ canvas.\ The\ direction\ is\ initially\ 0\ (to\ the\ right),\r\n\ the\ color\ is\ black,\ and\ the\ pen\ is\ down.\r\n\r\n\ @param\ xPos\ \ the\ initial\ horizontal\ coordinate\ of\ the\ pen\r\n\ @param\ yPos\ \ the\ initial\ vertical\ coordinate\ of\ the\ pen\r\n\ @param\ drawingCanvas\ \ the\ canvas\ to\ draw\ on\r\n
comment2.params=distance
comment2.target=void\ move(int)
comment2.text=\r\n\ Move\ the\ specified\ distance\ in\ the\ current\ direction.\ If\ the\ pen\ is\ down,\ \r\n\ leave\ a\ line\ on\ the\ canvas.\r\n\ \r\n\ @param\ distance\ \ The\ distance\ to\ move\ forward\ from\ the\ current\ location.\r\n
comment3.params=x\ y
comment3.target=void\ moveTo(int,\ int)
comment3.text=\r\n\ Move\ to\ the\ specified\ location.\ If\ the\ pen\ is\ down,\ leave\ a\ line\ on\ the\ canvas.\r\n\ \r\n\ @param\ x\ \ \ The\ x-coordinate\ to\ move\ to.\r\n\ @param\ y\ \ \ The\ y-coordinate\ to\ move\ to.\r\n
comment4.params=degrees
comment4.target=void\ turn(int)
comment4.text=\r\n\ Turn\ the\ specified\ amount\ (out\ of\ a\ 360\ degree\ circle)\ clockwise\ from\ the\ current\ \r\n\ rotation.\r\n\ \r\n\ @param\ degrees\ \ The\ amount\ of\ degrees\ to\ turn.\ (360\ is\ a\ full\ circle.)\r\n
comment5.params=angle
comment5.target=void\ turnTo(int)
comment5.text=\r\n\ Turn\ to\ the\ specified\ direction.\ 0\ is\ right,\ 90\ is\ down,\ 180\ is\ left,\ 270\ is\ up.\r\n\ \r\n\ @param\ angle\ \ The\ angle\ to\ turn\ to.\r\n
comment6.params=newColor
comment6.target=void\ setColor(java.awt.Color)
comment6.text=\r\n\ Set\ the\ drawing\ color.\r\n\ \r\n\ @param\ newColor\ \ The\ color\ to\ use\ for\ subsequent\ drawing\ operations.\r\n
comment7.params=
comment7.target=void\ penUp()
comment7.text=\r\n\ Lift\ the\ pen\ up.\ Moving\ afterwards\ will\ not\ leave\ a\ line\ on\ the\ canvas.\r\n
comment8.params=
comment8.target=void\ penDown()
comment8.text=\r\n\ Put\ the\ pen\ down.\ Moving\ afterwards\ will\ leave\ a\ line\ on\ the\ canvas.\r\n
comment9.params=
comment9.target=void\ randomSquiggle()
comment9.text=\r\n\ Scribble\ on\ the\ canvas\ in\ the\ current\ color.\ The\ size\ and\ complexity\ of\ the\ \r\n\ squiggle\ produced\ is\ defined\ by\ the\ constants\ SQIGGLE_SIZE\ and\ SQIGGLE_COUNT.\r\n
numComments=10
